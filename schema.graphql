schema {
  query: Query
  mutation: Mutation
}

type Account implements Node {
  accountManagerEmail: String
  accountManagerId: Int
  accountManagerName: String
  accountManagerPhone: String
  accountName: String!
  accountNumber: String!
  accountRegion: String
  accountSource: String
  accountStatus: AccountStatus!
  accountTier: String
  accountType: AccountType
  activeContracts: Int
  annualRevenue: Float
  annualSpend: Float
  billingAddress: String
  businessUnit: String
  city: String
  closedOpportunities: Int
  competitor: String
  contractEndDate: Datetime
  contractStartDate: Datetime
  country: String
  createdAt: Datetime!
  createdDate: Datetime!
  crossSellOpportunities: Int
  customerSince: Datetime
  description: String
  email: String
  engagementScore: Int
  id: Int!
  inactiveContracts: Int
  industry: String
  industryVertical: String
  isCustomer: Boolean!
  isPartner: Boolean!
  isProspect: Boolean!
  lastActivityDate: Datetime
  lastContactedDate: Datetime
  lastModifiedDate: Datetime!
  lastPurchaseDate: Datetime
  leadSource: String
  loyaltyScore: Int
  marketSegment: String
  marketingBudget: Float
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  npsScore: Int
  numberOfEmployees: Int
  openOpportunities: Int
  """Reads and enables pagination through a set of `Opportunity`."""
  opportunitiesByAccountId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """A condition to be used in determining which values should be returned by the collection."""
    condition: OpportunityCondition
    """A filter to be used in determining which values should be returned by the collection."""
    filter: OpportunityFilter
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """The method to use when ordering `Opportunity`."""
    orderBy: [OpportunitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): OpportunitiesConnection!
  ownership: String
  ownershipType: String
  parentAccountId: Int
  paymentTerms: String
  phoneNumber: String
  postalCode: String
  preferredContactMethod: String
  preferredLanguage: String
  primaryContactEmail: String
  primaryContactName: String
  primaryContactPhone: String
  rating: Int
  referralSource: String
  renewalDate: Datetime
  renewalProbability: Float
  secondaryContactEmail: String
  secondaryContactName: String
  secondaryContactPhone: String
  shippingAddress: String
  sicCode: String
  socialMediaHandle: String
  state: String
  strategicAccount: Boolean!
  subscriptionType: String
  territory: String
  tickerSymbol: String
  timezone: String
  totalPurchaseValue: Float
  updatedAt: Datetime!
  upsellOpportunities: Int
  """Reads and enables pagination through a set of `User`."""
  usersByAccountId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """A condition to be used in determining which values should be returned by the collection."""
    condition: UserCondition
    """A filter to be used in determining which values should be returned by the collection."""
    filter: UserFilter
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersConnection!
  website: String
}

"""A condition to be used against `Account` object types. All fields are tested for equality and combined with a logical ‘and.’"""
input AccountCondition {
  """Checks for equality with the object’s `accountManagerEmail` field."""
  accountManagerEmail: String
  """Checks for equality with the object’s `accountManagerId` field."""
  accountManagerId: Int
  """Checks for equality with the object’s `accountManagerName` field."""
  accountManagerName: String
  """Checks for equality with the object’s `accountManagerPhone` field."""
  accountManagerPhone: String
  """Checks for equality with the object’s `accountName` field."""
  accountName: String
  """Checks for equality with the object’s `accountNumber` field."""
  accountNumber: String
  """Checks for equality with the object’s `accountRegion` field."""
  accountRegion: String
  """Checks for equality with the object’s `accountSource` field."""
  accountSource: String
  """Checks for equality with the object’s `accountStatus` field."""
  accountStatus: AccountStatus
  """Checks for equality with the object’s `accountTier` field."""
  accountTier: String
  """Checks for equality with the object’s `accountType` field."""
  accountType: AccountType
  """Checks for equality with the object’s `activeContracts` field."""
  activeContracts: Int
  """Checks for equality with the object’s `annualRevenue` field."""
  annualRevenue: Float
  """Checks for equality with the object’s `annualSpend` field."""
  annualSpend: Float
  """Checks for equality with the object’s `billingAddress` field."""
  billingAddress: String
  """Checks for equality with the object’s `businessUnit` field."""
  businessUnit: String
  """Checks for equality with the object’s `city` field."""
  city: String
  """Checks for equality with the object’s `closedOpportunities` field."""
  closedOpportunities: Int
  """Checks for equality with the object’s `competitor` field."""
  competitor: String
  """Checks for equality with the object’s `contractEndDate` field."""
  contractEndDate: Datetime
  """Checks for equality with the object’s `contractStartDate` field."""
  contractStartDate: Datetime
  """Checks for equality with the object’s `country` field."""
  country: String
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `createdDate` field."""
  createdDate: Datetime
  """Checks for equality with the object’s `crossSellOpportunities` field."""
  crossSellOpportunities: Int
  """Checks for equality with the object’s `customerSince` field."""
  customerSince: Datetime
  """Checks for equality with the object’s `description` field."""
  description: String
  """Checks for equality with the object’s `email` field."""
  email: String
  """Checks for equality with the object’s `engagementScore` field."""
  engagementScore: Int
  """Checks for equality with the object’s `id` field."""
  id: Int
  """Checks for equality with the object’s `inactiveContracts` field."""
  inactiveContracts: Int
  """Checks for equality with the object’s `industry` field."""
  industry: String
  """Checks for equality with the object’s `industryVertical` field."""
  industryVertical: String
  """Checks for equality with the object’s `isCustomer` field."""
  isCustomer: Boolean
  """Checks for equality with the object’s `isPartner` field."""
  isPartner: Boolean
  """Checks for equality with the object’s `isProspect` field."""
  isProspect: Boolean
  """Checks for equality with the object’s `lastActivityDate` field."""
  lastActivityDate: Datetime
  """Checks for equality with the object’s `lastContactedDate` field."""
  lastContactedDate: Datetime
  """Checks for equality with the object’s `lastModifiedDate` field."""
  lastModifiedDate: Datetime
  """Checks for equality with the object’s `lastPurchaseDate` field."""
  lastPurchaseDate: Datetime
  """Checks for equality with the object’s `leadSource` field."""
  leadSource: String
  """Checks for equality with the object’s `loyaltyScore` field."""
  loyaltyScore: Int
  """Checks for equality with the object’s `marketSegment` field."""
  marketSegment: String
  """Checks for equality with the object’s `marketingBudget` field."""
  marketingBudget: Float
  """Checks for equality with the object’s `npsScore` field."""
  npsScore: Int
  """Checks for equality with the object’s `numberOfEmployees` field."""
  numberOfEmployees: Int
  """Checks for equality with the object’s `openOpportunities` field."""
  openOpportunities: Int
  """Checks for equality with the object’s `ownership` field."""
  ownership: String
  """Checks for equality with the object’s `ownershipType` field."""
  ownershipType: String
  """Checks for equality with the object’s `parentAccountId` field."""
  parentAccountId: Int
  """Checks for equality with the object’s `paymentTerms` field."""
  paymentTerms: String
  """Checks for equality with the object’s `phoneNumber` field."""
  phoneNumber: String
  """Checks for equality with the object’s `postalCode` field."""
  postalCode: String
  """Checks for equality with the object’s `preferredContactMethod` field."""
  preferredContactMethod: String
  """Checks for equality with the object’s `preferredLanguage` field."""
  preferredLanguage: String
  """Checks for equality with the object’s `primaryContactEmail` field."""
  primaryContactEmail: String
  """Checks for equality with the object’s `primaryContactName` field."""
  primaryContactName: String
  """Checks for equality with the object’s `primaryContactPhone` field."""
  primaryContactPhone: String
  """Checks for equality with the object’s `rating` field."""
  rating: Int
  """Checks for equality with the object’s `referralSource` field."""
  referralSource: String
  """Checks for equality with the object’s `renewalDate` field."""
  renewalDate: Datetime
  """Checks for equality with the object’s `renewalProbability` field."""
  renewalProbability: Float
  """Checks for equality with the object’s `secondaryContactEmail` field."""
  secondaryContactEmail: String
  """Checks for equality with the object’s `secondaryContactName` field."""
  secondaryContactName: String
  """Checks for equality with the object’s `secondaryContactPhone` field."""
  secondaryContactPhone: String
  """Checks for equality with the object’s `shippingAddress` field."""
  shippingAddress: String
  """Checks for equality with the object’s `sicCode` field."""
  sicCode: String
  """Checks for equality with the object’s `socialMediaHandle` field."""
  socialMediaHandle: String
  """Checks for equality with the object’s `state` field."""
  state: String
  """Checks for equality with the object’s `strategicAccount` field."""
  strategicAccount: Boolean
  """Checks for equality with the object’s `subscriptionType` field."""
  subscriptionType: String
  """Checks for equality with the object’s `territory` field."""
  territory: String
  """Checks for equality with the object’s `tickerSymbol` field."""
  tickerSymbol: String
  """Checks for equality with the object’s `timezone` field."""
  timezone: String
  """Checks for equality with the object’s `totalPurchaseValue` field."""
  totalPurchaseValue: Float
  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
  """Checks for equality with the object’s `upsellOpportunities` field."""
  upsellOpportunities: Int
  """Checks for equality with the object’s `website` field."""
  website: String
}

"""A filter to be used against `Account` object types. All fields are combined with a logical ‘and.’"""
input AccountFilter {
  """Filter by the object’s `accountManagerEmail` field."""
  accountManagerEmail: StringFilter
  """Filter by the object’s `accountManagerId` field."""
  accountManagerId: IntFilter
  """Filter by the object’s `accountManagerName` field."""
  accountManagerName: StringFilter
  """Filter by the object’s `accountManagerPhone` field."""
  accountManagerPhone: StringFilter
  """Filter by the object’s `accountName` field."""
  accountName: StringFilter
  """Filter by the object’s `accountNumber` field."""
  accountNumber: StringFilter
  """Filter by the object’s `accountRegion` field."""
  accountRegion: StringFilter
  """Filter by the object’s `accountSource` field."""
  accountSource: StringFilter
  """Filter by the object’s `accountStatus` field."""
  accountStatus: AccountStatusFilter
  """Filter by the object’s `accountTier` field."""
  accountTier: StringFilter
  """Filter by the object’s `accountType` field."""
  accountType: AccountTypeFilter
  """Filter by the object’s `activeContracts` field."""
  activeContracts: IntFilter
  """Checks for all expressions in this list."""
  and: [AccountFilter!]
  """Filter by the object’s `annualRevenue` field."""
  annualRevenue: FloatFilter
  """Filter by the object’s `annualSpend` field."""
  annualSpend: FloatFilter
  """Filter by the object’s `billingAddress` field."""
  billingAddress: StringFilter
  """Filter by the object’s `businessUnit` field."""
  businessUnit: StringFilter
  """Filter by the object’s `city` field."""
  city: StringFilter
  """Filter by the object’s `closedOpportunities` field."""
  closedOpportunities: IntFilter
  """Filter by the object’s `competitor` field."""
  competitor: StringFilter
  """Filter by the object’s `contractEndDate` field."""
  contractEndDate: DatetimeFilter
  """Filter by the object’s `contractStartDate` field."""
  contractStartDate: DatetimeFilter
  """Filter by the object’s `country` field."""
  country: StringFilter
  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter
  """Filter by the object’s `createdDate` field."""
  createdDate: DatetimeFilter
  """Filter by the object’s `crossSellOpportunities` field."""
  crossSellOpportunities: IntFilter
  """Filter by the object’s `customerSince` field."""
  customerSince: DatetimeFilter
  """Filter by the object’s `description` field."""
  description: StringFilter
  """Filter by the object’s `email` field."""
  email: StringFilter
  """Filter by the object’s `engagementScore` field."""
  engagementScore: IntFilter
  """Filter by the object’s `id` field."""
  id: IntFilter
  """Filter by the object’s `inactiveContracts` field."""
  inactiveContracts: IntFilter
  """Filter by the object’s `industry` field."""
  industry: StringFilter
  """Filter by the object’s `industryVertical` field."""
  industryVertical: StringFilter
  """Filter by the object’s `isCustomer` field."""
  isCustomer: BooleanFilter
  """Filter by the object’s `isPartner` field."""
  isPartner: BooleanFilter
  """Filter by the object’s `isProspect` field."""
  isProspect: BooleanFilter
  """Filter by the object’s `lastActivityDate` field."""
  lastActivityDate: DatetimeFilter
  """Filter by the object’s `lastContactedDate` field."""
  lastContactedDate: DatetimeFilter
  """Filter by the object’s `lastModifiedDate` field."""
  lastModifiedDate: DatetimeFilter
  """Filter by the object’s `lastPurchaseDate` field."""
  lastPurchaseDate: DatetimeFilter
  """Filter by the object’s `leadSource` field."""
  leadSource: StringFilter
  """Filter by the object’s `loyaltyScore` field."""
  loyaltyScore: IntFilter
  """Filter by the object’s `marketSegment` field."""
  marketSegment: StringFilter
  """Filter by the object’s `marketingBudget` field."""
  marketingBudget: FloatFilter
  """Negates the expression."""
  not: AccountFilter
  """Filter by the object’s `npsScore` field."""
  npsScore: IntFilter
  """Filter by the object’s `numberOfEmployees` field."""
  numberOfEmployees: IntFilter
  """Filter by the object’s `openOpportunities` field."""
  openOpportunities: IntFilter
  """Checks for any expressions in this list."""
  or: [AccountFilter!]
  """Filter by the object’s `ownership` field."""
  ownership: StringFilter
  """Filter by the object’s `ownershipType` field."""
  ownershipType: StringFilter
  """Filter by the object’s `parentAccountId` field."""
  parentAccountId: IntFilter
  """Filter by the object’s `paymentTerms` field."""
  paymentTerms: StringFilter
  """Filter by the object’s `phoneNumber` field."""
  phoneNumber: StringFilter
  """Filter by the object’s `postalCode` field."""
  postalCode: StringFilter
  """Filter by the object’s `preferredContactMethod` field."""
  preferredContactMethod: StringFilter
  """Filter by the object’s `preferredLanguage` field."""
  preferredLanguage: StringFilter
  """Filter by the object’s `primaryContactEmail` field."""
  primaryContactEmail: StringFilter
  """Filter by the object’s `primaryContactName` field."""
  primaryContactName: StringFilter
  """Filter by the object’s `primaryContactPhone` field."""
  primaryContactPhone: StringFilter
  """Filter by the object’s `rating` field."""
  rating: IntFilter
  """Filter by the object’s `referralSource` field."""
  referralSource: StringFilter
  """Filter by the object’s `renewalDate` field."""
  renewalDate: DatetimeFilter
  """Filter by the object’s `renewalProbability` field."""
  renewalProbability: FloatFilter
  """Filter by the object’s `secondaryContactEmail` field."""
  secondaryContactEmail: StringFilter
  """Filter by the object’s `secondaryContactName` field."""
  secondaryContactName: StringFilter
  """Filter by the object’s `secondaryContactPhone` field."""
  secondaryContactPhone: StringFilter
  """Filter by the object’s `shippingAddress` field."""
  shippingAddress: StringFilter
  """Filter by the object’s `sicCode` field."""
  sicCode: StringFilter
  """Filter by the object’s `socialMediaHandle` field."""
  socialMediaHandle: StringFilter
  """Filter by the object’s `state` field."""
  state: StringFilter
  """Filter by the object’s `strategicAccount` field."""
  strategicAccount: BooleanFilter
  """Filter by the object’s `subscriptionType` field."""
  subscriptionType: StringFilter
  """Filter by the object’s `territory` field."""
  territory: StringFilter
  """Filter by the object’s `tickerSymbol` field."""
  tickerSymbol: StringFilter
  """Filter by the object’s `timezone` field."""
  timezone: StringFilter
  """Filter by the object’s `totalPurchaseValue` field."""
  totalPurchaseValue: FloatFilter
  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
  """Filter by the object’s `upsellOpportunities` field."""
  upsellOpportunities: IntFilter
  """Filter by the object’s `website` field."""
  website: StringFilter
}

"""An input for mutations affecting `Account`"""
input AccountInput {
  accountManagerEmail: String
  accountManagerId: Int
  accountManagerName: String
  accountManagerPhone: String
  accountName: String!
  accountNumber: String!
  accountRegion: String
  accountSource: String
  accountStatus: AccountStatus!
  accountTier: String
  accountType: AccountType
  activeContracts: Int
  annualRevenue: Float
  annualSpend: Float
  billingAddress: String
  businessUnit: String
  city: String
  closedOpportunities: Int
  competitor: String
  contractEndDate: Datetime
  contractStartDate: Datetime
  country: String
  createdAt: Datetime
  createdDate: Datetime
  crossSellOpportunities: Int
  customerSince: Datetime
  description: String
  email: String
  engagementScore: Int
  id: Int
  inactiveContracts: Int
  industry: String
  industryVertical: String
  isCustomer: Boolean
  isPartner: Boolean
  isProspect: Boolean
  lastActivityDate: Datetime
  lastContactedDate: Datetime
  lastModifiedDate: Datetime!
  lastPurchaseDate: Datetime
  leadSource: String
  loyaltyScore: Int
  marketSegment: String
  marketingBudget: Float
  npsScore: Int
  numberOfEmployees: Int
  openOpportunities: Int
  ownership: String
  ownershipType: String
  parentAccountId: Int
  paymentTerms: String
  phoneNumber: String
  postalCode: String
  preferredContactMethod: String
  preferredLanguage: String
  primaryContactEmail: String
  primaryContactName: String
  primaryContactPhone: String
  rating: Int
  referralSource: String
  renewalDate: Datetime
  renewalProbability: Float
  secondaryContactEmail: String
  secondaryContactName: String
  secondaryContactPhone: String
  shippingAddress: String
  sicCode: String
  socialMediaHandle: String
  state: String
  strategicAccount: Boolean
  subscriptionType: String
  territory: String
  tickerSymbol: String
  timezone: String
  totalPurchaseValue: Float
  updatedAt: Datetime!
  upsellOpportunities: Int
  website: String
}

"""Represents an update to a `Account`. Fields that are set will be updated."""
input AccountPatch {
  accountManagerEmail: String
  accountManagerId: Int
  accountManagerName: String
  accountManagerPhone: String
  accountName: String
  accountNumber: String
  accountRegion: String
  accountSource: String
  accountStatus: AccountStatus
  accountTier: String
  accountType: AccountType
  activeContracts: Int
  annualRevenue: Float
  annualSpend: Float
  billingAddress: String
  businessUnit: String
  city: String
  closedOpportunities: Int
  competitor: String
  contractEndDate: Datetime
  contractStartDate: Datetime
  country: String
  createdAt: Datetime
  createdDate: Datetime
  crossSellOpportunities: Int
  customerSince: Datetime
  description: String
  email: String
  engagementScore: Int
  id: Int
  inactiveContracts: Int
  industry: String
  industryVertical: String
  isCustomer: Boolean
  isPartner: Boolean
  isProspect: Boolean
  lastActivityDate: Datetime
  lastContactedDate: Datetime
  lastModifiedDate: Datetime
  lastPurchaseDate: Datetime
  leadSource: String
  loyaltyScore: Int
  marketSegment: String
  marketingBudget: Float
  npsScore: Int
  numberOfEmployees: Int
  openOpportunities: Int
  ownership: String
  ownershipType: String
  parentAccountId: Int
  paymentTerms: String
  phoneNumber: String
  postalCode: String
  preferredContactMethod: String
  preferredLanguage: String
  primaryContactEmail: String
  primaryContactName: String
  primaryContactPhone: String
  rating: Int
  referralSource: String
  renewalDate: Datetime
  renewalProbability: Float
  secondaryContactEmail: String
  secondaryContactName: String
  secondaryContactPhone: String
  shippingAddress: String
  sicCode: String
  socialMediaHandle: String
  state: String
  strategicAccount: Boolean
  subscriptionType: String
  territory: String
  tickerSymbol: String
  timezone: String
  totalPurchaseValue: Float
  updatedAt: Datetime
  upsellOpportunities: Int
  website: String
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  PENDING
}

"""A filter to be used against AccountStatus fields. All fields are combined with a logical ‘and.’"""
input AccountStatusFilter {
  """Not equal to the specified value, treating null like an ordinary value."""
  distinctFrom: AccountStatus
  """Equal to the specified value."""
  equalTo: AccountStatus
  """Greater than the specified value."""
  greaterThan: AccountStatus
  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: AccountStatus
  """Included in the specified list."""
  in: [AccountStatus!]
  """Is null (if `true` is specified) or is not null (if `false` is specified)."""
  isNull: Boolean
  """Less than the specified value."""
  lessThan: AccountStatus
  """Less than or equal to the specified value."""
  lessThanOrEqualTo: AccountStatus
  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: AccountStatus
  """Not equal to the specified value."""
  notEqualTo: AccountStatus
  """Not included in the specified list."""
  notIn: [AccountStatus!]
}

enum AccountType {
  CHURNED
  CUSTOMER
  LEAD
  PROSPECT
}

"""A filter to be used against AccountType fields. All fields are combined with a logical ‘and.’"""
input AccountTypeFilter {
  """Not equal to the specified value, treating null like an ordinary value."""
  distinctFrom: AccountType
  """Equal to the specified value."""
  equalTo: AccountType
  """Greater than the specified value."""
  greaterThan: AccountType
  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: AccountType
  """Included in the specified list."""
  in: [AccountType!]
  """Is null (if `true` is specified) or is not null (if `false` is specified)."""
  isNull: Boolean
  """Less than the specified value."""
  lessThan: AccountType
  """Less than or equal to the specified value."""
  lessThanOrEqualTo: AccountType
  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: AccountType
  """Not equal to the specified value."""
  notEqualTo: AccountType
  """Not included in the specified list."""
  notIn: [AccountType!]
}

"""A connection to a list of `Account` values."""
type AccountsConnection {
  """A list of edges which contains the `Account` and cursor to aid in pagination."""
  edges: [AccountsEdge!]!
  """A list of `Account` objects."""
  nodes: [Account!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Account` you could get from the connection."""
  totalCount: Int!
}

"""A `Account` edge in the connection."""
type AccountsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Account` at the end of the edge."""
  node: Account!
}

"""Methods to use when ordering `Account`."""
enum AccountsOrderBy {
  ACCOUNT_MANAGER_EMAIL_ASC
  ACCOUNT_MANAGER_EMAIL_DESC
  ACCOUNT_MANAGER_ID_ASC
  ACCOUNT_MANAGER_ID_DESC
  ACCOUNT_MANAGER_NAME_ASC
  ACCOUNT_MANAGER_NAME_DESC
  ACCOUNT_MANAGER_PHONE_ASC
  ACCOUNT_MANAGER_PHONE_DESC
  ACCOUNT_NAME_ASC
  ACCOUNT_NAME_DESC
  ACCOUNT_NUMBER_ASC
  ACCOUNT_NUMBER_DESC
  ACCOUNT_REGION_ASC
  ACCOUNT_REGION_DESC
  ACCOUNT_SOURCE_ASC
  ACCOUNT_SOURCE_DESC
  ACCOUNT_STATUS_ASC
  ACCOUNT_STATUS_DESC
  ACCOUNT_TIER_ASC
  ACCOUNT_TIER_DESC
  ACCOUNT_TYPE_ASC
  ACCOUNT_TYPE_DESC
  ACTIVE_CONTRACTS_ASC
  ACTIVE_CONTRACTS_DESC
  ANNUAL_REVENUE_ASC
  ANNUAL_REVENUE_DESC
  ANNUAL_SPEND_ASC
  ANNUAL_SPEND_DESC
  BILLING_ADDRESS_ASC
  BILLING_ADDRESS_DESC
  BUSINESS_UNIT_ASC
  BUSINESS_UNIT_DESC
  CITY_ASC
  CITY_DESC
  CLOSED_OPPORTUNITIES_ASC
  CLOSED_OPPORTUNITIES_DESC
  COMPETITOR_ASC
  COMPETITOR_DESC
  CONTRACT_END_DATE_ASC
  CONTRACT_END_DATE_DESC
  CONTRACT_START_DATE_ASC
  CONTRACT_START_DATE_DESC
  COUNTRY_ASC
  COUNTRY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_DATE_ASC
  CREATED_DATE_DESC
  CROSS_SELL_OPPORTUNITIES_ASC
  CROSS_SELL_OPPORTUNITIES_DESC
  CUSTOMER_SINCE_ASC
  CUSTOMER_SINCE_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  EMAIL_ASC
  EMAIL_DESC
  ENGAGEMENT_SCORE_ASC
  ENGAGEMENT_SCORE_DESC
  ID_ASC
  ID_DESC
  INACTIVE_CONTRACTS_ASC
  INACTIVE_CONTRACTS_DESC
  INDUSTRY_ASC
  INDUSTRY_DESC
  INDUSTRY_VERTICAL_ASC
  INDUSTRY_VERTICAL_DESC
  IS_CUSTOMER_ASC
  IS_CUSTOMER_DESC
  IS_PARTNER_ASC
  IS_PARTNER_DESC
  IS_PROSPECT_ASC
  IS_PROSPECT_DESC
  LAST_ACTIVITY_DATE_ASC
  LAST_ACTIVITY_DATE_DESC
  LAST_CONTACTED_DATE_ASC
  LAST_CONTACTED_DATE_DESC
  LAST_MODIFIED_DATE_ASC
  LAST_MODIFIED_DATE_DESC
  LAST_PURCHASE_DATE_ASC
  LAST_PURCHASE_DATE_DESC
  LEAD_SOURCE_ASC
  LEAD_SOURCE_DESC
  LOYALTY_SCORE_ASC
  LOYALTY_SCORE_DESC
  MARKETING_BUDGET_ASC
  MARKETING_BUDGET_DESC
  MARKET_SEGMENT_ASC
  MARKET_SEGMENT_DESC
  NATURAL
  NPS_SCORE_ASC
  NPS_SCORE_DESC
  NUMBER_OF_EMPLOYEES_ASC
  NUMBER_OF_EMPLOYEES_DESC
  OPEN_OPPORTUNITIES_ASC
  OPEN_OPPORTUNITIES_DESC
  OWNERSHIP_ASC
  OWNERSHIP_DESC
  OWNERSHIP_TYPE_ASC
  OWNERSHIP_TYPE_DESC
  PARENT_ACCOUNT_ID_ASC
  PARENT_ACCOUNT_ID_DESC
  PAYMENT_TERMS_ASC
  PAYMENT_TERMS_DESC
  PHONE_NUMBER_ASC
  PHONE_NUMBER_DESC
  POSTAL_CODE_ASC
  POSTAL_CODE_DESC
  PREFERRED_CONTACT_METHOD_ASC
  PREFERRED_CONTACT_METHOD_DESC
  PREFERRED_LANGUAGE_ASC
  PREFERRED_LANGUAGE_DESC
  PRIMARY_CONTACT_EMAIL_ASC
  PRIMARY_CONTACT_EMAIL_DESC
  PRIMARY_CONTACT_NAME_ASC
  PRIMARY_CONTACT_NAME_DESC
  PRIMARY_CONTACT_PHONE_ASC
  PRIMARY_CONTACT_PHONE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  RATING_ASC
  RATING_DESC
  REFERRAL_SOURCE_ASC
  REFERRAL_SOURCE_DESC
  RENEWAL_DATE_ASC
  RENEWAL_DATE_DESC
  RENEWAL_PROBABILITY_ASC
  RENEWAL_PROBABILITY_DESC
  SECONDARY_CONTACT_EMAIL_ASC
  SECONDARY_CONTACT_EMAIL_DESC
  SECONDARY_CONTACT_NAME_ASC
  SECONDARY_CONTACT_NAME_DESC
  SECONDARY_CONTACT_PHONE_ASC
  SECONDARY_CONTACT_PHONE_DESC
  SHIPPING_ADDRESS_ASC
  SHIPPING_ADDRESS_DESC
  SIC_CODE_ASC
  SIC_CODE_DESC
  SOCIAL_MEDIA_HANDLE_ASC
  SOCIAL_MEDIA_HANDLE_DESC
  STATE_ASC
  STATE_DESC
  STRATEGIC_ACCOUNT_ASC
  STRATEGIC_ACCOUNT_DESC
  SUBSCRIPTION_TYPE_ASC
  SUBSCRIPTION_TYPE_DESC
  TERRITORY_ASC
  TERRITORY_DESC
  TICKER_SYMBOL_ASC
  TICKER_SYMBOL_DESC
  TIMEZONE_ASC
  TIMEZONE_DESC
  TOTAL_PURCHASE_VALUE_ASC
  TOTAL_PURCHASE_VALUE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPSELL_OPPORTUNITIES_ASC
  UPSELL_OPPORTUNITIES_DESC
  WEBSITE_ASC
  WEBSITE_DESC
}

"""A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’"""
input BooleanFilter {
  """Not equal to the specified value, treating null like an ordinary value."""
  distinctFrom: Boolean
  """Equal to the specified value."""
  equalTo: Boolean
  """Greater than the specified value."""
  greaterThan: Boolean
  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Boolean
  """Included in the specified list."""
  in: [Boolean!]
  """Is null (if `true` is specified) or is not null (if `false` is specified)."""
  isNull: Boolean
  """Less than the specified value."""
  lessThan: Boolean
  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Boolean
  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Boolean
  """Not equal to the specified value."""
  notEqualTo: Boolean
  """Not included in the specified list."""
  notIn: [Boolean!]
}

"""All input for the create `Account` mutation."""
input CreateAccountInput {
  """The `Account` to be created by this mutation."""
  account: AccountInput!
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `Account` mutation."""
type CreateAccountPayload {
  """The `Account` that was created by this mutation."""
  account: Account
  """An edge for our `Account`. May be used by Relay 1."""
  accountEdge(
    """The method to use when ordering `Account`."""
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AccountsEdge
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  """Our root query field type. Allows us to run any query from our mutation payload."""
  query: Query
}

"""All input for the create `Opportunity` mutation."""
input CreateOpportunityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  """The `Opportunity` to be created by this mutation."""
  opportunity: OpportunityInput!
}

"""The output of our create `Opportunity` mutation."""
type CreateOpportunityPayload {
  """Reads a single `Account` that is related to this `Opportunity`."""
  accountByAccountId: Account
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  """The `Opportunity` that was created by this mutation."""
  opportunity: Opportunity
  """An edge for our `Opportunity`. May be used by Relay 1."""
  opportunityEdge(
    """The method to use when ordering `Opportunity`."""
    orderBy: [OpportunitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): OpportunitiesEdge
  """Our root query field type. Allows us to run any query from our mutation payload."""
  query: Query
  """Reads a single `User` that is related to this `Opportunity`."""
  userByOwnerId: User
}

"""All input for the create `_PrismaMigration` mutation."""
input CreatePrismaMigrationInput {
  """The `_PrismaMigration` to be created by this mutation."""
  _prismaMigration: _PrismaMigrationInput!
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `_PrismaMigration` mutation."""
type CreatePrismaMigrationPayload {
  """The `_PrismaMigration` that was created by this mutation."""
  _prismaMigration: _PrismaMigration
  """An edge for our `_PrismaMigration`. May be used by Relay 1."""
  _prismaMigrationEdge(
    """The method to use when ordering `_PrismaMigration`."""
    orderBy: [_PrismaMigrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): _PrismaMigrationsEdge
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  """Our root query field type. Allows us to run any query from our mutation payload."""
  query: Query
}

"""All input for the create `User` mutation."""
input CreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  """The `User` to be created by this mutation."""
  user: UserInput!
}

"""The output of our create `User` mutation."""
type CreateUserPayload {
  """Reads a single `Account` that is related to this `User`."""
  accountByAccountId: Account
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  """Our root query field type. Allows us to run any query from our mutation payload."""
  query: Query
  """The `User` that was created by this mutation."""
  user: User
  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’"""
input DatetimeFilter {
  """Not equal to the specified value, treating null like an ordinary value."""
  distinctFrom: Datetime
  """Equal to the specified value."""
  equalTo: Datetime
  """Greater than the specified value."""
  greaterThan: Datetime
  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Datetime
  """Included in the specified list."""
  in: [Datetime!]
  """Is null (if `true` is specified) or is not null (if `false` is specified)."""
  isNull: Boolean
  """Less than the specified value."""
  lessThan: Datetime
  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Datetime
  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Datetime
  """Not equal to the specified value."""
  notEqualTo: Datetime
  """Not included in the specified list."""
  notIn: [Datetime!]
}

"""All input for the `deleteAccountById` mutation."""
input DeleteAccountByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteAccount` mutation."""
input DeleteAccountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  """The globally unique `ID` which will identify a single `Account` to be deleted."""
  nodeId: ID!
}

"""The output of our delete `Account` mutation."""
type DeleteAccountPayload {
  """The `Account` that was deleted by this mutation."""
  account: Account
  """An edge for our `Account`. May be used by Relay 1."""
  accountEdge(
    """The method to use when ordering `Account`."""
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AccountsEdge
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedAccountId: ID
  """Our root query field type. Allows us to run any query from our mutation payload."""
  query: Query
}

"""All input for the `deleteOpportunityById` mutation."""
input DeleteOpportunityByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteOpportunity` mutation."""
input DeleteOpportunityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  """The globally unique `ID` which will identify a single `Opportunity` to be deleted."""
  nodeId: ID!
}

"""The output of our delete `Opportunity` mutation."""
type DeleteOpportunityPayload {
  """Reads a single `Account` that is related to this `Opportunity`."""
  accountByAccountId: Account
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedOpportunityId: ID
  """The `Opportunity` that was deleted by this mutation."""
  opportunity: Opportunity
  """An edge for our `Opportunity`. May be used by Relay 1."""
  opportunityEdge(
    """The method to use when ordering `Opportunity`."""
    orderBy: [OpportunitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): OpportunitiesEdge
  """Our root query field type. Allows us to run any query from our mutation payload."""
  query: Query
  """Reads a single `User` that is related to this `Opportunity`."""
  userByOwnerId: User
}

"""All input for the `deletePrismaMigrationById` mutation."""
input DeletePrismaMigrationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""All input for the `deletePrismaMigration` mutation."""
input DeletePrismaMigrationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  """The globally unique `ID` which will identify a single `_PrismaMigration` to be deleted."""
  nodeId: ID!
}

"""The output of our delete `_PrismaMigration` mutation."""
type DeletePrismaMigrationPayload {
  """The `_PrismaMigration` that was deleted by this mutation."""
  _prismaMigration: _PrismaMigration
  """An edge for our `_PrismaMigration`. May be used by Relay 1."""
  _prismaMigrationEdge(
    """The method to use when ordering `_PrismaMigration`."""
    orderBy: [_PrismaMigrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): _PrismaMigrationsEdge
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedPrismaMigrationId: ID
  """Our root query field type. Allows us to run any query from our mutation payload."""
  query: Query
}

"""All input for the `deleteUserById` mutation."""
input DeleteUserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteUser` mutation."""
input DeleteUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  """The globally unique `ID` which will identify a single `User` to be deleted."""
  nodeId: ID!
}

"""The output of our delete `User` mutation."""
type DeleteUserPayload {
  """Reads a single `Account` that is related to this `User`."""
  accountByAccountId: Account
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedUserId: ID
  """Our root query field type. Allows us to run any query from our mutation payload."""
  query: Query
  """The `User` that was deleted by this mutation."""
  user: User
  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""A filter to be used against Float fields. All fields are combined with a logical ‘and.’"""
input FloatFilter {
  """Not equal to the specified value, treating null like an ordinary value."""
  distinctFrom: Float
  """Equal to the specified value."""
  equalTo: Float
  """Greater than the specified value."""
  greaterThan: Float
  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Float
  """Included in the specified list."""
  in: [Float!]
  """Is null (if `true` is specified) or is not null (if `false` is specified)."""
  isNull: Boolean
  """Less than the specified value."""
  lessThan: Float
  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Float
  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Float
  """Not equal to the specified value."""
  notEqualTo: Float
  """Not included in the specified list."""
  notIn: [Float!]
}

"""A filter to be used against Int fields. All fields are combined with a logical ‘and.’"""
input IntFilter {
  """Not equal to the specified value, treating null like an ordinary value."""
  distinctFrom: Int
  """Equal to the specified value."""
  equalTo: Int
  """Greater than the specified value."""
  greaterThan: Int
  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int
  """Included in the specified list."""
  in: [Int!]
  """Is null (if `true` is specified) or is not null (if `false` is specified)."""
  isNull: Boolean
  """Less than the specified value."""
  lessThan: Int
  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int
  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int
  """Not equal to the specified value."""
  notEqualTo: Int
  """Not included in the specified list."""
  notIn: [Int!]
}

"""The root mutation type which contains root level fields which mutate data."""
type Mutation {
  """Creates a single `Account`."""
  createAccount(
    """The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."""
    input: CreateAccountInput!
  ): CreateAccountPayload
  """Creates a single `Opportunity`."""
  createOpportunity(
    """The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."""
    input: CreateOpportunityInput!
  ): CreateOpportunityPayload
  """Creates a single `_PrismaMigration`."""
  createPrismaMigration(
    """The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."""
    input: CreatePrismaMigrationInput!
  ): CreatePrismaMigrationPayload
  """Creates a single `User`."""
  createUser(
    """The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."""
    input: CreateUserInput!
  ): CreateUserPayload
  """Deletes a single `Account` using its globally unique id."""
  deleteAccount(
    """The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."""
    input: DeleteAccountInput!
  ): DeleteAccountPayload
  """Deletes a single `Account` using a unique key."""
  deleteAccountById(
    """The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."""
    input: DeleteAccountByIdInput!
  ): DeleteAccountPayload
  """Deletes a single `Opportunity` using its globally unique id."""
  deleteOpportunity(
    """The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."""
    input: DeleteOpportunityInput!
  ): DeleteOpportunityPayload
  """Deletes a single `Opportunity` using a unique key."""
  deleteOpportunityById(
    """The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."""
    input: DeleteOpportunityByIdInput!
  ): DeleteOpportunityPayload
  """Deletes a single `_PrismaMigration` using its globally unique id."""
  deletePrismaMigration(
    """The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."""
    input: DeletePrismaMigrationInput!
  ): DeletePrismaMigrationPayload
  """Deletes a single `_PrismaMigration` using a unique key."""
  deletePrismaMigrationById(
    """The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."""
    input: DeletePrismaMigrationByIdInput!
  ): DeletePrismaMigrationPayload
  """Deletes a single `User` using its globally unique id."""
  deleteUser(
    """The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."""
    input: DeleteUserInput!
  ): DeleteUserPayload
  """Deletes a single `User` using a unique key."""
  deleteUserById(
    """The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."""
    input: DeleteUserByIdInput!
  ): DeleteUserPayload
  """Updates a single `Account` using its globally unique id and a patch."""
  updateAccount(
    """The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."""
    input: UpdateAccountInput!
  ): UpdateAccountPayload
  """Updates a single `Account` using a unique key and a patch."""
  updateAccountById(
    """The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."""
    input: UpdateAccountByIdInput!
  ): UpdateAccountPayload
  """Updates a single `Opportunity` using its globally unique id and a patch."""
  updateOpportunity(
    """The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."""
    input: UpdateOpportunityInput!
  ): UpdateOpportunityPayload
  """Updates a single `Opportunity` using a unique key and a patch."""
  updateOpportunityById(
    """The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."""
    input: UpdateOpportunityByIdInput!
  ): UpdateOpportunityPayload
  """Updates a single `_PrismaMigration` using its globally unique id and a patch."""
  updatePrismaMigration(
    """The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."""
    input: UpdatePrismaMigrationInput!
  ): UpdatePrismaMigrationPayload
  """Updates a single `_PrismaMigration` using a unique key and a patch."""
  updatePrismaMigrationById(
    """The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."""
    input: UpdatePrismaMigrationByIdInput!
  ): UpdatePrismaMigrationPayload
  """Updates a single `User` using its globally unique id and a patch."""
  updateUser(
    """The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."""
    input: UpdateUserInput!
  ): UpdateUserPayload
  """Updates a single `User` using a unique key and a patch."""
  updateUserById(
    """The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."""
    input: UpdateUserByIdInput!
  ): UpdateUserPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
}

"""A connection to a list of `Opportunity` values."""
type OpportunitiesConnection {
  """A list of edges which contains the `Opportunity` and cursor to aid in pagination."""
  edges: [OpportunitiesEdge!]!
  """A list of `Opportunity` objects."""
  nodes: [Opportunity!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `Opportunity` you could get from the connection."""
  totalCount: Int!
}

"""A `Opportunity` edge in the connection."""
type OpportunitiesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `Opportunity` at the end of the edge."""
  node: Opportunity!
}

"""Methods to use when ordering `Opportunity`."""
enum OpportunitiesOrderBy {
  ACCOUNT_ID_ASC
  ACCOUNT_ID_DESC
  AMOUNT_ASC
  AMOUNT_DESC
  CLOSE_DATE_ASC
  CLOSE_DATE_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  ID_ASC
  ID_DESC
  NATURAL
  OPPORTUNITY_NAME_ASC
  OPPORTUNITY_NAME_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROBABILITY_ASC
  PROBABILITY_DESC
  SOURCE_ASC
  SOURCE_DESC
  STAGE_ASC
  STAGE_DESC
  STATUS_ASC
  STATUS_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type Opportunity implements Node {
  """Reads a single `Account` that is related to this `Opportunity`."""
  accountByAccountId: Account
  accountId: Int!
  amount: Float!
  closeDate: Datetime
  createdAt: Datetime!
  description: String
  id: Int!
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  opportunityName: String!
  ownerId: Int!
  probability: Float
  source: String
  stage: String!
  status: OpportunityStatus!
  updatedAt: Datetime!
  """Reads a single `User` that is related to this `Opportunity`."""
  userByOwnerId: User
}

"""
A condition to be used against `Opportunity` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input OpportunityCondition {
  """Checks for equality with the object’s `accountId` field."""
  accountId: Int
  """Checks for equality with the object’s `amount` field."""
  amount: Float
  """Checks for equality with the object’s `closeDate` field."""
  closeDate: Datetime
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `description` field."""
  description: String
  """Checks for equality with the object’s `id` field."""
  id: Int
  """Checks for equality with the object’s `opportunityName` field."""
  opportunityName: String
  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int
  """Checks for equality with the object’s `probability` field."""
  probability: Float
  """Checks for equality with the object’s `source` field."""
  source: String
  """Checks for equality with the object’s `stage` field."""
  stage: String
  """Checks for equality with the object’s `status` field."""
  status: OpportunityStatus
  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""A filter to be used against `Opportunity` object types. All fields are combined with a logical ‘and.’"""
input OpportunityFilter {
  """Filter by the object’s `accountId` field."""
  accountId: IntFilter
  """Filter by the object’s `amount` field."""
  amount: FloatFilter
  """Checks for all expressions in this list."""
  and: [OpportunityFilter!]
  """Filter by the object’s `closeDate` field."""
  closeDate: DatetimeFilter
  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter
  """Filter by the object’s `description` field."""
  description: StringFilter
  """Filter by the object’s `id` field."""
  id: IntFilter
  """Negates the expression."""
  not: OpportunityFilter
  """Filter by the object’s `opportunityName` field."""
  opportunityName: StringFilter
  """Checks for any expressions in this list."""
  or: [OpportunityFilter!]
  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter
  """Filter by the object’s `probability` field."""
  probability: FloatFilter
  """Filter by the object’s `source` field."""
  source: StringFilter
  """Filter by the object’s `stage` field."""
  stage: StringFilter
  """Filter by the object’s `status` field."""
  status: OpportunityStatusFilter
  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `Opportunity`"""
input OpportunityInput {
  accountId: Int!
  amount: Float!
  closeDate: Datetime
  createdAt: Datetime
  description: String
  id: Int
  opportunityName: String!
  ownerId: Int!
  probability: Float
  source: String
  stage: String!
  status: OpportunityStatus
  updatedAt: Datetime!
}

"""Represents an update to a `Opportunity`. Fields that are set will be updated."""
input OpportunityPatch {
  accountId: Int
  amount: Float
  closeDate: Datetime
  createdAt: Datetime
  description: String
  id: Int
  opportunityName: String
  ownerId: Int
  probability: Float
  source: String
  stage: String
  status: OpportunityStatus
  updatedAt: Datetime
}

enum OpportunityStatus {
  CLOSED
  IN_PROGRESS
  LOST
  ON_HOLD
  OPEN
  WON
}

"""A filter to be used against OpportunityStatus fields. All fields are combined with a logical ‘and.’"""
input OpportunityStatusFilter {
  """Not equal to the specified value, treating null like an ordinary value."""
  distinctFrom: OpportunityStatus
  """Equal to the specified value."""
  equalTo: OpportunityStatus
  """Greater than the specified value."""
  greaterThan: OpportunityStatus
  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: OpportunityStatus
  """Included in the specified list."""
  in: [OpportunityStatus!]
  """Is null (if `true` is specified) or is not null (if `false` is specified)."""
  isNull: Boolean
  """Less than the specified value."""
  lessThan: OpportunityStatus
  """Less than or equal to the specified value."""
  lessThanOrEqualTo: OpportunityStatus
  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: OpportunityStatus
  """Not equal to the specified value."""
  notEqualTo: OpportunityStatus
  """Not included in the specified list."""
  notIn: [OpportunityStatus!]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """Reads a single `_PrismaMigration` using its globally unique `ID`."""
  _prismaMigration(
    """The globally unique `ID` to be used in selecting a single `_PrismaMigration`."""
    nodeId: ID!
  ): _PrismaMigration
  _prismaMigrationById(id: String!): _PrismaMigration
  """Reads a single `Account` using its globally unique `ID`."""
  account(
    """The globally unique `ID` to be used in selecting a single `Account`."""
    nodeId: ID!
  ): Account
  accountById(id: Int!): Account
  """Reads and enables pagination through a set of `Account`."""
  allAccounts(
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """A condition to be used in determining which values should be returned by the collection."""
    condition: AccountCondition
    """A filter to be used in determining which values should be returned by the collection."""
    filter: AccountFilter
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """The method to use when ordering `Account`."""
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AccountsConnection
  """Reads and enables pagination through a set of `Opportunity`."""
  allOpportunities(
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """A condition to be used in determining which values should be returned by the collection."""
    condition: OpportunityCondition
    """A filter to be used in determining which values should be returned by the collection."""
    filter: OpportunityFilter
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """The method to use when ordering `Opportunity`."""
    orderBy: [OpportunitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): OpportunitiesConnection
  """Reads and enables pagination through a set of `_PrismaMigration`."""
  allPrismaMigrations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """A condition to be used in determining which values should be returned by the collection."""
    condition: _PrismaMigrationCondition
    """A filter to be used in determining which values should be returned by the collection."""
    filter: _PrismaMigrationFilter
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """The method to use when ordering `_PrismaMigration`."""
    orderBy: [_PrismaMigrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): _PrismaMigrationsConnection
  """Reads and enables pagination through a set of `User`."""
  allUsers(
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """A condition to be used in determining which values should be returned by the collection."""
    condition: UserCondition
    """A filter to be used in determining which values should be returned by the collection."""
    filter: UserFilter
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersConnection
  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node
  """The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`."""
  nodeId: ID!
  """Reads a single `Opportunity` using its globally unique `ID`."""
  opportunity(
    """The globally unique `ID` to be used in selecting a single `Opportunity`."""
    nodeId: ID!
  ): Opportunity
  opportunityById(id: Int!): Opportunity
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
  """Reads a single `User` using its globally unique `ID`."""
  user(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User
  userById(id: Int!): User
}

"""A filter to be used against String fields. All fields are combined with a logical ‘and.’"""
input StringFilter {
  """Not equal to the specified value, treating null like an ordinary value."""
  distinctFrom: String
  """Not equal to the specified value, treating null like an ordinary value (case-insensitive)."""
  distinctFromInsensitive: String
  """Ends with the specified string (case-sensitive)."""
  endsWith: String
  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String
  """Equal to the specified value."""
  equalTo: String
  """Equal to the specified value (case-insensitive)."""
  equalToInsensitive: String
  """Greater than the specified value."""
  greaterThan: String
  """Greater than the specified value (case-insensitive)."""
  greaterThanInsensitive: String
  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String
  """Greater than or equal to the specified value (case-insensitive)."""
  greaterThanOrEqualToInsensitive: String
  """Included in the specified list."""
  in: [String!]
  """Included in the specified list (case-insensitive)."""
  inInsensitive: [String!]
  """Contains the specified string (case-sensitive)."""
  includes: String
  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String
  """Is null (if `true` is specified) or is not null (if `false` is specified)."""
  isNull: Boolean
  """Less than the specified value."""
  lessThan: String
  """Less than the specified value (case-insensitive)."""
  lessThanInsensitive: String
  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String
  """Less than or equal to the specified value (case-insensitive)."""
  lessThanOrEqualToInsensitive: String
  """Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters."""
  like: String
  """Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters."""
  likeInsensitive: String
  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String
  """Equal to the specified value, treating null like an ordinary value (case-insensitive)."""
  notDistinctFromInsensitive: String
  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String
  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String
  """Not equal to the specified value."""
  notEqualTo: String
  """Not equal to the specified value (case-insensitive)."""
  notEqualToInsensitive: String
  """Not included in the specified list."""
  notIn: [String!]
  """Not included in the specified list (case-insensitive)."""
  notInInsensitive: [String!]
  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String
  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String
  """Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters."""
  notLike: String
  """Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters."""
  notLikeInsensitive: String
  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String
  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String
  """Starts with the specified string (case-sensitive)."""
  startsWith: String
  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String
}

"""All input for the `updateAccountById` mutation."""
input UpdateAccountByIdInput {
  """An object where the defined keys will be set on the `Account` being updated."""
  accountPatch: AccountPatch!
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `updateAccount` mutation."""
input UpdateAccountInput {
  """An object where the defined keys will be set on the `Account` being updated."""
  accountPatch: AccountPatch!
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  """The globally unique `ID` which will identify a single `Account` to be updated."""
  nodeId: ID!
}

"""The output of our update `Account` mutation."""
type UpdateAccountPayload {
  """The `Account` that was updated by this mutation."""
  account: Account
  """An edge for our `Account`. May be used by Relay 1."""
  accountEdge(
    """The method to use when ordering `Account`."""
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AccountsEdge
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  """Our root query field type. Allows us to run any query from our mutation payload."""
  query: Query
}

"""All input for the `updateOpportunityById` mutation."""
input UpdateOpportunityByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
  """An object where the defined keys will be set on the `Opportunity` being updated."""
  opportunityPatch: OpportunityPatch!
}

"""All input for the `updateOpportunity` mutation."""
input UpdateOpportunityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  """The globally unique `ID` which will identify a single `Opportunity` to be updated."""
  nodeId: ID!
  """An object where the defined keys will be set on the `Opportunity` being updated."""
  opportunityPatch: OpportunityPatch!
}

"""The output of our update `Opportunity` mutation."""
type UpdateOpportunityPayload {
  """Reads a single `Account` that is related to this `Opportunity`."""
  accountByAccountId: Account
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  """The `Opportunity` that was updated by this mutation."""
  opportunity: Opportunity
  """An edge for our `Opportunity`. May be used by Relay 1."""
  opportunityEdge(
    """The method to use when ordering `Opportunity`."""
    orderBy: [OpportunitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): OpportunitiesEdge
  """Our root query field type. Allows us to run any query from our mutation payload."""
  query: Query
  """Reads a single `User` that is related to this `Opportunity`."""
  userByOwnerId: User
}

"""All input for the `updatePrismaMigrationById` mutation."""
input UpdatePrismaMigrationByIdInput {
  """An object where the defined keys will be set on the `_PrismaMigration` being updated."""
  _prismaMigrationPatch: _PrismaMigrationPatch!
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""All input for the `updatePrismaMigration` mutation."""
input UpdatePrismaMigrationInput {
  """An object where the defined keys will be set on the `_PrismaMigration` being updated."""
  _prismaMigrationPatch: _PrismaMigrationPatch!
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  """The globally unique `ID` which will identify a single `_PrismaMigration` to be updated."""
  nodeId: ID!
}

"""The output of our update `_PrismaMigration` mutation."""
type UpdatePrismaMigrationPayload {
  """The `_PrismaMigration` that was updated by this mutation."""
  _prismaMigration: _PrismaMigration
  """An edge for our `_PrismaMigration`. May be used by Relay 1."""
  _prismaMigrationEdge(
    """The method to use when ordering `_PrismaMigration`."""
    orderBy: [_PrismaMigrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): _PrismaMigrationsEdge
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  """Our root query field type. Allows us to run any query from our mutation payload."""
  query: Query
}

"""All input for the `updateUserById` mutation."""
input UpdateUserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
  """An object where the defined keys will be set on the `User` being updated."""
  userPatch: UserPatch!
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  """The globally unique `ID` which will identify a single `User` to be updated."""
  nodeId: ID!
  """An object where the defined keys will be set on the `User` being updated."""
  userPatch: UserPatch!
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """Reads a single `Account` that is related to this `User`."""
  accountByAccountId: Account
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  """Our root query field type. Allows us to run any query from our mutation payload."""
  query: Query
  """The `User` that was updated by this mutation."""
  user: User
  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

type User implements Node {
  """Reads a single `Account` that is related to this `User`."""
  accountByAccountId: Account
  accountId: Int!
  bio: String
  city: String
  country: String
  createdAt: Datetime!
  dateOfBirth: Datetime
  department: String
  email: String!
  facebookProfile: String
  failedLoginAttempts: Int!
  firstName: String!
  gender: String
  id: Int!
  isActive: Boolean!
  isVerified: Boolean!
  jobTitle: String
  lastLoginDate: Datetime
  lastName: String!
  lastPasswordChangeDate: Datetime
  linkedinProfile: String
  loginCount: Int!
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  """Reads and enables pagination through a set of `Opportunity`."""
  opportunitiesByOwnerId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor
    """Read all values in the set before (above) this cursor."""
    before: Cursor
    """A condition to be used in determining which values should be returned by the collection."""
    condition: OpportunityCondition
    """A filter to be used in determining which values should be returned by the collection."""
    filter: OpportunityFilter
    """Only read the first `n` values of the set."""
    first: Int
    """Only read the last `n` values of the set."""
    last: Int
    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    """The method to use when ordering `Opportunity`."""
    orderBy: [OpportunitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): OpportunitiesConnection!
  password: String!
  phoneNumber: String
  postalCode: String
  preferredLanguage: String
  profileImageUrl: String
  role: UserRole!
  state: String
  streetAddress: String
  timezone: String
  twitterHandle: String
  updatedAt: Datetime!
  username: String!
}

"""A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’"""
input UserCondition {
  """Checks for equality with the object’s `accountId` field."""
  accountId: Int
  """Checks for equality with the object’s `bio` field."""
  bio: String
  """Checks for equality with the object’s `city` field."""
  city: String
  """Checks for equality with the object’s `country` field."""
  country: String
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
  """Checks for equality with the object’s `dateOfBirth` field."""
  dateOfBirth: Datetime
  """Checks for equality with the object’s `department` field."""
  department: String
  """Checks for equality with the object’s `email` field."""
  email: String
  """Checks for equality with the object’s `facebookProfile` field."""
  facebookProfile: String
  """Checks for equality with the object’s `failedLoginAttempts` field."""
  failedLoginAttempts: Int
  """Checks for equality with the object’s `firstName` field."""
  firstName: String
  """Checks for equality with the object’s `gender` field."""
  gender: String
  """Checks for equality with the object’s `id` field."""
  id: Int
  """Checks for equality with the object’s `isActive` field."""
  isActive: Boolean
  """Checks for equality with the object’s `isVerified` field."""
  isVerified: Boolean
  """Checks for equality with the object’s `jobTitle` field."""
  jobTitle: String
  """Checks for equality with the object’s `lastLoginDate` field."""
  lastLoginDate: Datetime
  """Checks for equality with the object’s `lastName` field."""
  lastName: String
  """Checks for equality with the object’s `lastPasswordChangeDate` field."""
  lastPasswordChangeDate: Datetime
  """Checks for equality with the object’s `linkedinProfile` field."""
  linkedinProfile: String
  """Checks for equality with the object’s `loginCount` field."""
  loginCount: Int
  """Checks for equality with the object’s `password` field."""
  password: String
  """Checks for equality with the object’s `phoneNumber` field."""
  phoneNumber: String
  """Checks for equality with the object’s `postalCode` field."""
  postalCode: String
  """Checks for equality with the object’s `preferredLanguage` field."""
  preferredLanguage: String
  """Checks for equality with the object’s `profileImageUrl` field."""
  profileImageUrl: String
  """Checks for equality with the object’s `role` field."""
  role: UserRole
  """Checks for equality with the object’s `state` field."""
  state: String
  """Checks for equality with the object’s `streetAddress` field."""
  streetAddress: String
  """Checks for equality with the object’s `timezone` field."""
  timezone: String
  """Checks for equality with the object’s `twitterHandle` field."""
  twitterHandle: String
  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
  """Checks for equality with the object’s `username` field."""
  username: String
}

"""A filter to be used against `User` object types. All fields are combined with a logical ‘and.’"""
input UserFilter {
  """Filter by the object’s `accountId` field."""
  accountId: IntFilter
  """Checks for all expressions in this list."""
  and: [UserFilter!]
  """Filter by the object’s `bio` field."""
  bio: StringFilter
  """Filter by the object’s `city` field."""
  city: StringFilter
  """Filter by the object’s `country` field."""
  country: StringFilter
  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter
  """Filter by the object’s `dateOfBirth` field."""
  dateOfBirth: DatetimeFilter
  """Filter by the object’s `department` field."""
  department: StringFilter
  """Filter by the object’s `email` field."""
  email: StringFilter
  """Filter by the object’s `facebookProfile` field."""
  facebookProfile: StringFilter
  """Filter by the object’s `failedLoginAttempts` field."""
  failedLoginAttempts: IntFilter
  """Filter by the object’s `firstName` field."""
  firstName: StringFilter
  """Filter by the object’s `gender` field."""
  gender: StringFilter
  """Filter by the object’s `id` field."""
  id: IntFilter
  """Filter by the object’s `isActive` field."""
  isActive: BooleanFilter
  """Filter by the object’s `isVerified` field."""
  isVerified: BooleanFilter
  """Filter by the object’s `jobTitle` field."""
  jobTitle: StringFilter
  """Filter by the object’s `lastLoginDate` field."""
  lastLoginDate: DatetimeFilter
  """Filter by the object’s `lastName` field."""
  lastName: StringFilter
  """Filter by the object’s `lastPasswordChangeDate` field."""
  lastPasswordChangeDate: DatetimeFilter
  """Filter by the object’s `linkedinProfile` field."""
  linkedinProfile: StringFilter
  """Filter by the object’s `loginCount` field."""
  loginCount: IntFilter
  """Negates the expression."""
  not: UserFilter
  """Checks for any expressions in this list."""
  or: [UserFilter!]
  """Filter by the object’s `password` field."""
  password: StringFilter
  """Filter by the object’s `phoneNumber` field."""
  phoneNumber: StringFilter
  """Filter by the object’s `postalCode` field."""
  postalCode: StringFilter
  """Filter by the object’s `preferredLanguage` field."""
  preferredLanguage: StringFilter
  """Filter by the object’s `profileImageUrl` field."""
  profileImageUrl: StringFilter
  """Filter by the object’s `role` field."""
  role: UserRoleFilter
  """Filter by the object’s `state` field."""
  state: StringFilter
  """Filter by the object’s `streetAddress` field."""
  streetAddress: StringFilter
  """Filter by the object’s `timezone` field."""
  timezone: StringFilter
  """Filter by the object’s `twitterHandle` field."""
  twitterHandle: StringFilter
  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
  """Filter by the object’s `username` field."""
  username: StringFilter
}

"""An input for mutations affecting `User`"""
input UserInput {
  accountId: Int!
  bio: String
  city: String
  country: String
  createdAt: Datetime
  dateOfBirth: Datetime
  department: String
  email: String!
  facebookProfile: String
  failedLoginAttempts: Int
  firstName: String!
  gender: String
  id: Int
  isActive: Boolean
  isVerified: Boolean
  jobTitle: String
  lastLoginDate: Datetime
  lastName: String!
  lastPasswordChangeDate: Datetime
  linkedinProfile: String
  loginCount: Int
  password: String!
  phoneNumber: String
  postalCode: String
  preferredLanguage: String
  profileImageUrl: String
  role: UserRole
  state: String
  streetAddress: String
  timezone: String
  twitterHandle: String
  updatedAt: Datetime!
  username: String!
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  accountId: Int
  bio: String
  city: String
  country: String
  createdAt: Datetime
  dateOfBirth: Datetime
  department: String
  email: String
  facebookProfile: String
  failedLoginAttempts: Int
  firstName: String
  gender: String
  id: Int
  isActive: Boolean
  isVerified: Boolean
  jobTitle: String
  lastLoginDate: Datetime
  lastName: String
  lastPasswordChangeDate: Datetime
  linkedinProfile: String
  loginCount: Int
  password: String
  phoneNumber: String
  postalCode: String
  preferredLanguage: String
  profileImageUrl: String
  role: UserRole
  state: String
  streetAddress: String
  timezone: String
  twitterHandle: String
  updatedAt: Datetime
  username: String
}

enum UserRole {
  ADMIN
  GUEST
  MODERATOR
  USER
}

"""A filter to be used against UserRole fields. All fields are combined with a logical ‘and.’"""
input UserRoleFilter {
  """Not equal to the specified value, treating null like an ordinary value."""
  distinctFrom: UserRole
  """Equal to the specified value."""
  equalTo: UserRole
  """Greater than the specified value."""
  greaterThan: UserRole
  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: UserRole
  """Included in the specified list."""
  in: [UserRole!]
  """Is null (if `true` is specified) or is not null (if `false` is specified)."""
  isNull: Boolean
  """Less than the specified value."""
  lessThan: UserRole
  """Less than or equal to the specified value."""
  lessThanOrEqualTo: UserRole
  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: UserRole
  """Not equal to the specified value."""
  notEqualTo: UserRole
  """Not included in the specified list."""
  notIn: [UserRole!]
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """A list of edges which contains the `User` and cursor to aid in pagination."""
  edges: [UsersEdge!]!
  """A list of `User` objects."""
  nodes: [User!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `User` at the end of the edge."""
  node: User!
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  ACCOUNT_ID_ASC
  ACCOUNT_ID_DESC
  BIO_ASC
  BIO_DESC
  CITY_ASC
  CITY_DESC
  COUNTRY_ASC
  COUNTRY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  DATE_OF_BIRTH_ASC
  DATE_OF_BIRTH_DESC
  DEPARTMENT_ASC
  DEPARTMENT_DESC
  EMAIL_ASC
  EMAIL_DESC
  FACEBOOK_PROFILE_ASC
  FACEBOOK_PROFILE_DESC
  FAILED_LOGIN_ATTEMPTS_ASC
  FAILED_LOGIN_ATTEMPTS_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  GENDER_ASC
  GENDER_DESC
  ID_ASC
  ID_DESC
  IS_ACTIVE_ASC
  IS_ACTIVE_DESC
  IS_VERIFIED_ASC
  IS_VERIFIED_DESC
  JOB_TITLE_ASC
  JOB_TITLE_DESC
  LAST_LOGIN_DATE_ASC
  LAST_LOGIN_DATE_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
  LAST_PASSWORD_CHANGE_DATE_ASC
  LAST_PASSWORD_CHANGE_DATE_DESC
  LINKEDIN_PROFILE_ASC
  LINKEDIN_PROFILE_DESC
  LOGIN_COUNT_ASC
  LOGIN_COUNT_DESC
  NATURAL
  PASSWORD_ASC
  PASSWORD_DESC
  PHONE_NUMBER_ASC
  PHONE_NUMBER_DESC
  POSTAL_CODE_ASC
  POSTAL_CODE_DESC
  PREFERRED_LANGUAGE_ASC
  PREFERRED_LANGUAGE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROFILE_IMAGE_URL_ASC
  PROFILE_IMAGE_URL_DESC
  ROLE_ASC
  ROLE_DESC
  STATE_ASC
  STATE_DESC
  STREET_ADDRESS_ASC
  STREET_ADDRESS_DESC
  TIMEZONE_ASC
  TIMEZONE_DESC
  TWITTER_HANDLE_ASC
  TWITTER_HANDLE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  USERNAME_ASC
  USERNAME_DESC
}

type _PrismaMigration implements Node {
  appliedStepsCount: Int!
  checksum: String!
  finishedAt: Datetime
  id: String!
  logs: String
  migrationName: String!
  """A globally unique identifier. Can be used in various places throughout the system to identify this single value."""
  nodeId: ID!
  rolledBackAt: Datetime
  startedAt: Datetime!
}

"""
A condition to be used against `_PrismaMigration` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input _PrismaMigrationCondition {
  """Checks for equality with the object’s `appliedStepsCount` field."""
  appliedStepsCount: Int
  """Checks for equality with the object’s `checksum` field."""
  checksum: String
  """Checks for equality with the object’s `finishedAt` field."""
  finishedAt: Datetime
  """Checks for equality with the object’s `id` field."""
  id: String
  """Checks for equality with the object’s `logs` field."""
  logs: String
  """Checks for equality with the object’s `migrationName` field."""
  migrationName: String
  """Checks for equality with the object’s `rolledBackAt` field."""
  rolledBackAt: Datetime
  """Checks for equality with the object’s `startedAt` field."""
  startedAt: Datetime
}

"""A filter to be used against `_PrismaMigration` object types. All fields are combined with a logical ‘and.’"""
input _PrismaMigrationFilter {
  """Checks for all expressions in this list."""
  and: [_PrismaMigrationFilter!]
  """Filter by the object’s `appliedStepsCount` field."""
  appliedStepsCount: IntFilter
  """Filter by the object’s `checksum` field."""
  checksum: StringFilter
  """Filter by the object’s `finishedAt` field."""
  finishedAt: DatetimeFilter
  """Filter by the object’s `id` field."""
  id: StringFilter
  """Filter by the object’s `logs` field."""
  logs: StringFilter
  """Filter by the object’s `migrationName` field."""
  migrationName: StringFilter
  """Negates the expression."""
  not: _PrismaMigrationFilter
  """Checks for any expressions in this list."""
  or: [_PrismaMigrationFilter!]
  """Filter by the object’s `rolledBackAt` field."""
  rolledBackAt: DatetimeFilter
  """Filter by the object’s `startedAt` field."""
  startedAt: DatetimeFilter
}

"""An input for mutations affecting `_PrismaMigration`"""
input _PrismaMigrationInput {
  appliedStepsCount: Int
  checksum: String!
  finishedAt: Datetime
  id: String!
  logs: String
  migrationName: String!
  rolledBackAt: Datetime
  startedAt: Datetime
}

"""Represents an update to a `_PrismaMigration`. Fields that are set will be updated."""
input _PrismaMigrationPatch {
  appliedStepsCount: Int
  checksum: String
  finishedAt: Datetime
  id: String
  logs: String
  migrationName: String
  rolledBackAt: Datetime
  startedAt: Datetime
}

"""A connection to a list of `_PrismaMigration` values."""
type _PrismaMigrationsConnection {
  """A list of edges which contains the `_PrismaMigration` and cursor to aid in pagination."""
  edges: [_PrismaMigrationsEdge!]!
  """A list of `_PrismaMigration` objects."""
  nodes: [_PrismaMigration!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """The count of *all* `_PrismaMigration` you could get from the connection."""
  totalCount: Int!
}

"""A `_PrismaMigration` edge in the connection."""
type _PrismaMigrationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor
  """The `_PrismaMigration` at the end of the edge."""
  node: _PrismaMigration!
}

"""Methods to use when ordering `_PrismaMigration`."""
enum _PrismaMigrationsOrderBy {
  APPLIED_STEPS_COUNT_ASC
  APPLIED_STEPS_COUNT_DESC
  CHECKSUM_ASC
  CHECKSUM_DESC
  FINISHED_AT_ASC
  FINISHED_AT_DESC
  ID_ASC
  ID_DESC
  LOGS_ASC
  LOGS_DESC
  MIGRATION_NAME_ASC
  MIGRATION_NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ROLLED_BACK_AT_ASC
  ROLLED_BACK_AT_DESC
  STARTED_AT_ASC
  STARTED_AT_DESC
}
