/* eslint-disable */
import * as types from "./graphql";

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
	"\n  query AccountList($filter: AccountFilter, $after: Cursor, $first: Int, $orderBy: [AccountsOrderBy!]) {\n    allAccounts(filter: $filter, after: $after, first: $first, orderBy: $orderBy) {\n      __typename\n      totalCount\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      nodes {\n        accountName\n        billingAddress\n        shippingAddress\n        city\n        state\n        postalCode\n        country\n        annualRevenue\n        numberOfEmployees\n        ownership\n        parentAccountId\n        id\n        accountSource\n        description\n        createdDate\n        lastModifiedDate\n        lastActivityDate\n        rating\n        sicCode\n        tickerSymbol\n        ownershipType\n        accountType\n        createdAt\n        territory\n        marketSegment\n        primaryContactName\n        primaryContactEmail\n        primaryContactPhone\n        secondaryContactName\n        secondaryContactEmail\n        secondaryContactPhone\n        accountManagerId\n        accountManagerId\n        accountManagerName\n        accountManagerEmail\n        accountManagerPhone\n        updatedAt\n        renewalDate\n        contractStartDate\n        contractEndDate\n        subscriptionType\n        paymentTerms\n        lastPurchaseDate\n        totalPurchaseValue\n        openOpportunities\n        closedOpportunities\n        activeContracts\n        inactiveContracts\n        isPartner\n        isCustomer\n        isProspect\n        industryVertical\n        referralSource\n        marketingBudget\n        leadSource\n        accountNumber\n        businessUnit\n        accountStatus\n        upsellOpportunities\n        crossSellOpportunities\n        competitor\n        accountTier\n        lastContactedDate\n        customerSince\n        loyaltyScore\n        npsScore\n        industry\n        accountRegion\n        preferredContactMethod\n        renewalProbability\n        strategicAccount\n        socialMediaHandle\n        preferredLanguage\n        timezone\n        annualSpend\n        engagementScore\n        website\n        phoneNumber\n        email\n        usersByAccountId {\n          totalCount\n          nodes {\n            phoneNumber\n            dateOfBirth\n            gender\n            jobTitle\n            jobTitle\n            department\n            isActive\n            isVerified\n            lastLoginDate\n            profileImageUrl\n            id\n            firstName\n            lastName\n            email\n          }\n        }\n        opportunitiesByAccountId {\n          totalCount\n          nodes {\n            id\n            createdAt\n            updatedAt\n            opportunityName\n            source\n            closeDate\n            stage\n            probability\n            status\n            userByOwnerId {\n              id\n              lastName\n              firstName\n              email\n            }\n          }\n        }\n      }\n    }\n  }\n":
		types.AccountListDocument,
	"\n  query AccountListForLoaders($filter: AccountFilter, $after: Cursor, $first: Int, $orderBy: [AccountsOrderBy!]) {\n    data: allAccounts(filter: $filter, after: $after, first: $first, orderBy: $orderBy) {\n      __typename\n      totalCount\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      nodes {\n        accountName\n        billingAddress\n        shippingAddress\n        city\n        state\n        postalCode\n        country\n        annualRevenue\n        numberOfEmployees\n        ownership\n        parentAccountId\n        id\n        accountSource\n        description\n        createdDate\n        lastModifiedDate\n        lastActivityDate\n        rating\n        sicCode\n        tickerSymbol\n        ownershipType\n        accountType\n        createdAt\n        territory\n        marketSegment\n        primaryContactName\n        primaryContactEmail\n        primaryContactPhone\n        secondaryContactName\n        secondaryContactEmail\n        secondaryContactPhone\n        accountManagerId\n        accountManagerId\n        accountManagerName\n        accountManagerEmail\n        accountManagerPhone\n        updatedAt\n        renewalDate\n        contractStartDate\n        contractEndDate\n        subscriptionType\n        paymentTerms\n        lastPurchaseDate\n        totalPurchaseValue\n        openOpportunities\n        closedOpportunities\n        activeContracts\n        inactiveContracts\n        isPartner\n        isCustomer\n        isProspect\n        industryVertical\n        referralSource\n        marketingBudget\n        leadSource\n        accountNumber\n        businessUnit\n        accountStatus\n        upsellOpportunities\n        crossSellOpportunities\n        competitor\n        accountTier\n        lastContactedDate\n        customerSince\n        loyaltyScore\n        npsScore\n        industry\n        accountRegion\n        preferredContactMethod\n        renewalProbability\n        strategicAccount\n        socialMediaHandle\n        preferredLanguage\n        timezone\n        annualSpend\n        engagementScore\n        website\n        phoneNumber\n        email\n      }\n    }\n  }\n":
		types.AccountListForLoadersDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
	source: "\n  query AccountList($filter: AccountFilter, $after: Cursor, $first: Int, $orderBy: [AccountsOrderBy!]) {\n    allAccounts(filter: $filter, after: $after, first: $first, orderBy: $orderBy) {\n      __typename\n      totalCount\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      nodes {\n        accountName\n        billingAddress\n        shippingAddress\n        city\n        state\n        postalCode\n        country\n        annualRevenue\n        numberOfEmployees\n        ownership\n        parentAccountId\n        id\n        accountSource\n        description\n        createdDate\n        lastModifiedDate\n        lastActivityDate\n        rating\n        sicCode\n        tickerSymbol\n        ownershipType\n        accountType\n        createdAt\n        territory\n        marketSegment\n        primaryContactName\n        primaryContactEmail\n        primaryContactPhone\n        secondaryContactName\n        secondaryContactEmail\n        secondaryContactPhone\n        accountManagerId\n        accountManagerId\n        accountManagerName\n        accountManagerEmail\n        accountManagerPhone\n        updatedAt\n        renewalDate\n        contractStartDate\n        contractEndDate\n        subscriptionType\n        paymentTerms\n        lastPurchaseDate\n        totalPurchaseValue\n        openOpportunities\n        closedOpportunities\n        activeContracts\n        inactiveContracts\n        isPartner\n        isCustomer\n        isProspect\n        industryVertical\n        referralSource\n        marketingBudget\n        leadSource\n        accountNumber\n        businessUnit\n        accountStatus\n        upsellOpportunities\n        crossSellOpportunities\n        competitor\n        accountTier\n        lastContactedDate\n        customerSince\n        loyaltyScore\n        npsScore\n        industry\n        accountRegion\n        preferredContactMethod\n        renewalProbability\n        strategicAccount\n        socialMediaHandle\n        preferredLanguage\n        timezone\n        annualSpend\n        engagementScore\n        website\n        phoneNumber\n        email\n        usersByAccountId {\n          totalCount\n          nodes {\n            phoneNumber\n            dateOfBirth\n            gender\n            jobTitle\n            jobTitle\n            department\n            isActive\n            isVerified\n            lastLoginDate\n            profileImageUrl\n            id\n            firstName\n            lastName\n            email\n          }\n        }\n        opportunitiesByAccountId {\n          totalCount\n          nodes {\n            id\n            createdAt\n            updatedAt\n            opportunityName\n            source\n            closeDate\n            stage\n            probability\n            status\n            userByOwnerId {\n              id\n              lastName\n              firstName\n              email\n            }\n          }\n        }\n      }\n    }\n  }\n",
): typeof import("./graphql").AccountListDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
	source: "\n  query AccountListForLoaders($filter: AccountFilter, $after: Cursor, $first: Int, $orderBy: [AccountsOrderBy!]) {\n    data: allAccounts(filter: $filter, after: $after, first: $first, orderBy: $orderBy) {\n      __typename\n      totalCount\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      nodes {\n        accountName\n        billingAddress\n        shippingAddress\n        city\n        state\n        postalCode\n        country\n        annualRevenue\n        numberOfEmployees\n        ownership\n        parentAccountId\n        id\n        accountSource\n        description\n        createdDate\n        lastModifiedDate\n        lastActivityDate\n        rating\n        sicCode\n        tickerSymbol\n        ownershipType\n        accountType\n        createdAt\n        territory\n        marketSegment\n        primaryContactName\n        primaryContactEmail\n        primaryContactPhone\n        secondaryContactName\n        secondaryContactEmail\n        secondaryContactPhone\n        accountManagerId\n        accountManagerId\n        accountManagerName\n        accountManagerEmail\n        accountManagerPhone\n        updatedAt\n        renewalDate\n        contractStartDate\n        contractEndDate\n        subscriptionType\n        paymentTerms\n        lastPurchaseDate\n        totalPurchaseValue\n        openOpportunities\n        closedOpportunities\n        activeContracts\n        inactiveContracts\n        isPartner\n        isCustomer\n        isProspect\n        industryVertical\n        referralSource\n        marketingBudget\n        leadSource\n        accountNumber\n        businessUnit\n        accountStatus\n        upsellOpportunities\n        crossSellOpportunities\n        competitor\n        accountTier\n        lastContactedDate\n        customerSince\n        loyaltyScore\n        npsScore\n        industry\n        accountRegion\n        preferredContactMethod\n        renewalProbability\n        strategicAccount\n        socialMediaHandle\n        preferredLanguage\n        timezone\n        annualSpend\n        engagementScore\n        website\n        phoneNumber\n        email\n      }\n    }\n  }\n",
): typeof import("./graphql").AccountListForLoadersDocument;

export function graphql(source: string) {
	return (documents as any)[source] ?? {};
}
